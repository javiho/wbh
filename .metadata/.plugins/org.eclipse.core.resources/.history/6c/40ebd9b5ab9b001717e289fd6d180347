package com.wbh.wbh_artifact1;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.vaadin.pontus.vizcomponent.VizComponent;
import com.vaadin.pontus.vizcomponent.VizComponent.EdgeClickEvent;
import com.vaadin.pontus.vizcomponent.VizComponent.NodeClickEvent;
import com.vaadin.pontus.vizcomponent.VizComponent.NodeClickListener;
import com.vaadin.pontus.vizcomponent.model.Graph;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

public class NetworkView extends VerticalLayout{

	Graph graph;
	
	public NetworkView(){
		final VizComponent component = new VizComponent();
		Graph.Node node1 = new Graph.Node("n1");
        Graph.Node node2 = new Graph.Node("n2");

        Graph graph = new Graph("G", Graph.DIGRAPH);
        this.graph = graph;
        graph.addEdge(node1, node2);
        graph.addEdge(node2, node1);
        Graph.Edge edge1 = graph.getEdge(node1, node2);
        edge1.setParam("color", "red");
        node1.setParam("shape", "box");
        node1.setParam("label", "\"First!\"");
        edge1.setParam("label", "e1");
        edge1.setParam("splines", "none");

        component.setWidth("300px");
        component.setHeight("200px");
        component.drawGraph(graph);

        Label label = new Label(
                "In this example there are two nodes. "
                        + "The color of the nodes and edges is changed when clicking on them. "
                        + "Note also the tooltip");

        setSizeFull();
        addComponent(label);
        addComponent(component);
        setExpandRatio(component, 1);
        setComponentAlignment(component, Alignment.MIDDLE_CENTER);
        
        component.addClickListener(new NodeClickListener() {

            @Override
            public void nodeClicked(NodeClickEvent e) {
                Graph.Node node = e.getNode();
                component.addCss(node, "stroke", "blue");
                component.addTextCss(node, "fill", "blue");
            }

        });

        component.addClickListener(new VizComponent.EdgeClickListener() {

            @Override
            public void edgeClicked(EdgeClickEvent e) {
                component.addCss(e.getEdge(), "stroke", "blue");
                component.addTextCss(e.getEdge(), "fill", "blue");

            }

        });
	}
	
	public void visualizeDistanceMatrix(DistanceMatrix<Trait> dm){
		/*
		 * lisää nodet
		 * lisää edget niiden välille. lisää arvo edgen labeliksi
		 * 
		 */
		Map<String, Graph.Node> nodeNames = new HashMap<>();
		List<Trait> nodes = dm.getNodes();
		for(Trait trait : nodes){
			String traitName = node.getFullName();
			Graph.Node newNode = new Graph.Node(traitName);
			nodeNames.put(traitName, newNode)
			this.graph.addNode(newNode);
		}
		List<Object[]> edges = dm.getEdgesAndNodes();
		for(Object[] edge : edges){
			Trait trait1 = (Trait)edge[1];
			Trait trait2 = (Trait)edge[2];
			String node1name = node1.getFullName();
			String node2name = node2.getFullName();
			Graph.Node 
			double edgeValue = ( (EdgeData)edge[0] ).getDistance();
			//this.graph.addNode(new Graph
			this.graph.addEdge(node1name, node2name);
		}
	}
	
}
