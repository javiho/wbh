package com.wbh.wbh_artifact1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.common.graph.MutableNetwork;
import com.google.common.graph.NetworkBuilder;

public class DistanceMatrix <T>{

	MutableNetwork distances;
	
	public DistanceMatrix(){
		NetworkBuilder<T, Boolean> networdBuilder = new NetwordBuilder();
		this.distances = networdBuilder.build();
	}
	
	/*private Map<T, Map<T, Double>> distances;
	
	public DistanceMatrix(){
		distances = new HashMap<>();
	}
	
	public Map<T, Double> getDistancesFrom(T element){
		return distances.get(element);
	}
	
	public double getDistance(T from, T to){
		return getDistancesFrom(from).get(to);
	}
	
	public boolean isSymmetricDistance(T element1, T element2){
		return getDistance(element1, element2) == getDistance(element2, element1);
	}
	
	public void addPair(T element1, T element2, double distance){
		//
		// jos e1 on jo entuudestaan ja jos e2 on sen etäisyyslistassa:
		// 		virhe
		// jos e2 on jo entuudestaan ja jos e1 on sen etäisyyslistassa:
		// 		virhe
		// jos e1 == e2: virhe
		 // 	jos e1 on jo
		 //		lisää e2 tällä etäisyydellä
		 //
	}*/
	
	/*
	private List<List<T>> content;
	private List<Trait> rowObjects;
	
	public DistanceMatrix(){
		content = new ArrayList<>();
		rowObjects = new ArrayList<>();
	}
	
	public T get(int i, int j){
		return content.get(i).get(j);
	}
	
	public T getRow(int index){
		return content.get(i).get(j);
	}
	
	public T getRow(Trait trait){
		
	}
	*/
	
}
